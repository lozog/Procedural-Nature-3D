Resources:

Camera:
http://learnopengl.com/#!Getting-started/Camera

L-systems
http://www.allenpike.com/modeling-plants-with-l-systems/
- randomness in lengths, angles, probabilities on which rule to use

Bloom
http://prideout.net/archive/bloom/

Terrain:
http://www.geisswerks.com/about_terrain.html
http://www.flipcode.com/archives/Calculating_Vertex_Normals_for_Height_Maps.shtml
http://stackoverflow.com/questions/13983189/opengl-how-to-calculate-normals-in-a-terrain-height-grid

Perlin Noise
http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
http://flafla2.github.io/2014/08/09/perlinnoise.html
http://www.java-gaming.org/index.php?topic=31637.0 - I want results like these
http://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/procedural-patterns-noise-part-1/creating-simple-2D-noise - really good lesson on noise functions & Perlin noise

Skyboxes
http://learnopengl.com/#!Advanced-OpenGL/Cubemaps
http://ogldev.atspace.co.uk/www/tutorial25/tutorial25.html
http://www.custommapmakers.org/skyboxes.php

Billboards
http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/billboards/

Screen-Door Transparency
http://digitalrune.github.io/DigitalRune-Documentation/html/fa431d48-b457-4c70-a590-d44b0840ab1e.htm

Water
http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/realistic-natural-effect-rendering-water-i-r2138

http://www.tomdalling.com/blog/modern-opengl
https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter01.html
http://pcg.wikidot.com/category-pcg-algorithms
https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html